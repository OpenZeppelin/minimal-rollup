// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

import {IProverManager} from "./IProverManager.sol";

/// @dev Interface for an L1 Rollup.
///
/// A rollup is defined by a sequence of publications that describe the chain's progression.
///
/// Publications are submitted to the chain by calling `propose`. To avoid storing the entire publication on-chain, the
/// rollup tracks publications as `bytes32` checkpoints (e.g. a hash of the publication) that are generated by the
/// `toCheckpoint`.
///
/// To be considered finalized, a publication must be proven. Proving is deferred to a later to allow a proving entity
/// to compute the proof off-chain and submit it. The `prove` function is used to update the chain's checkpoint after
/// verifying a proof for a transition between two checkpoints (with `isValidTransition`).
interface IRollup {
    event Proposed(bytes32 indexed checkpoint, bytes publication);
    event Proven(bytes32 indexed checkpoint);

    error InvalidProof();
    error UnknownCheckpoint();
    error ProvenCheckpoint();

    /// @notice Last proven checkpoint. Defines the current state of the chain.
    function latestCheckpoint() external view returns (bytes32);

    /// @notice Returns whether the `publication` has been proposed.
    function proposed(bytes calldata publication) external view returns (bool);

    /// @notice Returns whether the `publication` has been proven.
    function proven(bytes calldata publication) external view returns (bool);

    /// @notice Returns whether the `proof` was verified correctly to transitioning between `from` and `target`
    /// checkpoints.
    function isValidTransition(bytes32 from, bytes32 target, bytes memory proof) external view returns (bool);

    /// @notice Converts a publication into a cryptographic checkpoint (e.g. a hash).
    function toCheckpoint(bytes memory publication) external view returns (bytes32);

    /// @notice Proposes a new publication to the chain. Relies on {toCheckpoint} to process the publication
    /// into a checkpoint. Emits a {Proposed} event.
    function propose(bytes memory publication) external;

    /// @notice Updates `provenCheckpoint` to `target` after verifying the proof for a transition between `from` and
    /// `target` checkpoints. Emits {Proven} if the proof can be verified (see {isValidTransition}).
    /// Otherwise, reverts with {InvalidProof}.
    function prove(bytes32 from, bytes32 target, bytes memory proof) external;
}
