// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

// This file is auto-generated with the command `just get-sample-deposit-proof`.
// Do not edit manually.
// See ISampleDepositProof.t.sol for an explanation of its purpose.

import {ISignalService} from "src/protocol/ISignalService.sol";
import {IETHBridge} from "src/protocol/IETHBridge.sol";
import {ISampleDepositProof} from "./ISampleDepositProof.t.sol";

contract SampleDepositProof is ISampleDepositProof {

    ISignalService.SignalProof[] private signalProofs;
    IETHBridge.ETHDeposit[] private deposits;
    bytes32[] private slots;
    bytes32[] private ids;

    constructor() public {
        ISignalService.SignalProof memory signalProof = ISignalService.SignalProof({
            accountProof: new bytes[]({account_proof_size}),
            storageProof: new bytes[]({storage_proof_size}),
            stateRoot: bytes32({state_root}),
            blockHash: bytes32({block_hash})
        });
        {populate_account_proof}
        {populate_storage_proof}

        signalProofs.push(signalProof);

        deposits.push(
            IETHBridge.ETHDeposit({
                nonce: {nonce},
                from: address({sender}),
                to: address({recipient}),
                amount: {amount},
                data: bytes("{data}")
            })
        );

        slots.push(bytes32({slot}));
        ids.push(bytes32({id}));
    }

    /// @inheritdoc ISampleDepositProof
    function getSourceAddresses() public pure returns (address signalService, address bridge) {
        signalService = address({signal_service_address});
        bridge = address({bridge_address});
    }

    /// @inheritdoc ISampleDepositProof
    function getDepositSignalProof() public view returns (ISignalService.SignalProof memory signalProof) {
        return signalProofs[0];
    }

    /// @inheritdoc ISampleDepositProof
    function getEthDeposit() public view returns (IETHBridge.ETHDeposit memory deposit) {
        return deposits[0];
    }

    /// @inheritdoc ISampleDepositProof
    function getDepositInternals() public view returns (bytes32 slot, bytes32 id) {
        return (slots[0], ids[0]);
    }
}